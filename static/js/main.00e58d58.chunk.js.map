{"version":3,"sources":["../../src/symbols.js","../../src/hoc.js","Input.js","App.js","index.js"],"names":["Symbol","keyAttribute","Input","props","upperCase","setState","value","state","toUpperCase","clear","defaultValue","this","onChange","e","target","Component","ManagedInput","SYMBOLS","withInstancesManager","WrappedComponent","componentWillUnmount","App","name","onClick","getInstance","ReactDOM","render","document","getElementById"],"mappings":"qTAAA,MACaA,OADE,aAEFA,OAAO,a,ICyC0BC,E,4BCzCxCC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,UAAY,WAAO,IAAD,EAChB,EAAKC,SAAS,CAAEC,MAAK,UAAE,EAAKC,MAAMD,aAAb,aAAE,EAAkBE,iBANxB,EASnBC,MAAQ,WACN,EAAKJ,SAAS,CAAEC,MAAO,MARvB,EAAKC,MAAQ,CAAED,MAAOH,EAAMO,cAFX,E,0CAanB,WAAU,IAAD,OACP,OACE,2BACEJ,MAAOK,KAAKJ,MAAMD,MAClBM,SAAU,SAACC,GAAD,OAAO,EAAKR,SAAS,CAAEC,MAAOO,EAAEC,OAAOR,e,GAlBrCS,aCGdC,QFsC+D,IAAvBf,MAAe,QAzCtD,SAA8Bc,GAenC,OAdAA,EAAUE,GAAqB,IAA/BF,IAEAA,eAAyB,kBAAMA,EAAUE,IAEzCF,cAAwB,mBAASA,qBAAT,IAExBA,cAAwB,qBACtBA,uBADsB,IAGxBA,iBAA2B,mBAASA,wBAAT,IAE3BA,kBAA4B,mBAC1BA,yBAAqCA,MADX,IAG5B,EAsCOG,CAZ4D,Y,QAEjE,cAAmB,aACjB,uBACAC,cAA6B,QAA7BA,G,yHAAAA,KAFiB,EAF8C,O,EAAA,G,EAAA,G,sEAAA,iCAOjEC,WACED,iBAAgCR,KAAKR,MAArCgB,KAR+D,GCjBtDjB,KCEAmB,EArBH,WACV,OACE,oCACE,kBAACL,EAAD,CAAcM,KAAK,SACnB,4BACEC,QAAS,kBACPP,EAAaQ,YAAY,QAAQnB,SAAS,CAAEC,MAAO,WAFvD,0BAOA,4BAAQiB,QAAS,kBAAMP,EAAaQ,YAAY,QAAQpB,cAAxD,aAGA,4BAAQmB,QAAS,kBAAMP,EAAaQ,YAAY,QAAQf,UAAxD,iBCfNgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.00e58d58.chunk.js","sourcesContent":["export default {\n  INSTANCES: Symbol('instances'),\n  OBSERVERS: Symbol('observers')\n}\n","import SYMBOLS from './symbols'\n\nexport function withInstancesManager(Component) {\n  Component[SYMBOLS.INSTANCES] = new Map()\n\n  Component.getInstances = () => Component[SYMBOLS.INSTANCES]\n\n  Component.getInstance = (key) => Component.getInstances().get(key)\n\n  Component.addInstance = (key, instance) =>\n    Component.getInstances().set(key, instance)\n\n  Component.removeInstance = (key) => Component.getInstances().delete(key)\n\n  Component.isInstanceExist = (key) =>\n    Component.getInstances().has(key) && Component.get(key)\n\n  return Component\n}\n\nexport function withObservable(Component) {\n  Component[SYMBOLS.OBSERVERS] = new Map()\n\n  Component.getObservers = () => Component[SYMBOLS.OBSERVERS]\n\n  Component.getObserver = (key) => Component.observers.get(key) ?? []\n\n  Component.addObserver = (key, watcher) => {\n    if (!Component.observers.has(key)) {\n      Component.observers.set(key, [])\n    }\n    Component.getObservers(key).push(watcher)\n  }\n\n  Component.removeObserver = (key) => {\n    if (Component.observers.has(key)) {\n      Component.observers.delete(key)\n    }\n  }\n\n  return Component\n}\n\nexport function withInstanceManage(Component, keyAttribute = 'name') {\n  class WrappedComponent extends Component {\n    constructor(props) {\n      super(props)\n      WrappedComponent.addInstance(this.props[keyAttribute], this)\n    }\n\n    componentWillUnmount() {\n      WrappedComponent.removeInstance(this.props[keyAttribute])\n    }\n  }\n\n  return withInstancesManager(WrappedComponent)\n}\n","import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { value: props.defaultValue }\r\n  }\r\n\r\n  upperCase = () => {\r\n    this.setState({ value: this.state.value?.toUpperCase() })\r\n  }\r\n\r\n  clear = () => {\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.state.value}\r\n        onChange={(e) => this.setState({ value: e.target.value })}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\nimport { withInstanceManage } from 'react-instances'\n\nimport Input from './Input'\n\nconst ManagedInput = withInstanceManage(Input)\n\nconst App = () => {\n  return (\n    <>\n      <ManagedInput name='test' />\n      <button\n        onClick={() =>\n          ManagedInput.getInstance('test').setState({ value: 'test' })\n        }\n      >\n        Change value to \"test\"\n      </button>\n      <button onClick={() => ManagedInput.getInstance('test').upperCase()}>\n        Uppercase\n      </button>\n      <button onClick={() => ManagedInput.getInstance('test').clear()}>\n        Clear value\n      </button>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}